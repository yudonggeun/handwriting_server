# local host 전용
services:
  frontend:
    image: frontend
    build:
      dockerfile_inline: |
        FROM node as builder
        RUN mkdir /myapp
        WORKDIR /myapp
        RUN git clone https://github.com/yudonggeun/handwriting-promotion.git /myapp
        RUN npm install
        RUN npm run build

        # nginx 이미지를 사용합니다. 뒤에 tag가 없으면 latest 를 사용합니다.
        FROM nginx
        RUN mkdir /app
        # work dir 고정
        WORKDIR /app
        RUN mkdir ./build
        RUN rm /etc/nginx/conf.d/default.conf
        COPY --from=builder /myapp/nginx.conf /etc/nginx/conf.d
        COPY --from=builder /myapp/build ./build
        EXPOSE 80
        # container 실행 시 자동으로 실행할 command. nginx 시작함
        CMD ["nginx", "-g", "daemon off;"]
    ports:
      - target: 80
        published: 3000
        mode: ingress

    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 3
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 1s
      timeout: 1s
      retries: 3
      start_period: 5s
    networks:
      - handwriting-net

  backend:
    image: backapp
    build:
      dockerfile_inline: |
        FROM gradle as builder
        RUN mkdir /myapp
        WORKDIR /myapp
        RUN git clone https://github.com/yudonggeun/handwriting_server.git /myapp
        # 빌더 이미지에서 애플리케이션 빌드
        RUN gradle build

        FROM openjdk
        CMD ["./mvnw", "clean", "package"]
        COPY --from=builder /myapp/build/libs/handwriting-0.0.1-SNAPSHOT.jar /spring-webapp.jar
        EXPOSE 8080
        ENTRYPOINT java -jar /spring-webapp.jar
    ports:
      - target: 8080
        published: 8080
        mode: ingress
    environment:
      JWT_SECRET: testsecret
      # google oauth secrets
      GOOGLE_CLIENTID:
      GOOGLE_CLIENT_SECRET:
      GOOGLE_REDIRECT_URL:
      #kakao oauth secret
      KAKAO_CLIENTID:
      KAKAO_SECRET:
      KAKAO_REDIRECT_URL:
      #profile
      spring_profiles_active: local
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 1s
      timeout: 1s
      retries: 3
      start_period: 5s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 3
    networks:
      - handwriting-net

  gateway:
    image: kong
    ports:
      - target: 8000
        published: 80
        mode: ingress
      - target: 8443
        published: 443
        mode: ingress
      - target: 8001
        published: 8001
        mode: ingress
      - target: 8444
        published: 8444
        mode: ingress
    networks:
      - handwriting-net
    environment:
      KONG_DATABASE: off
      KONG_DECLARATIVE_CONFIG: /kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    configs:
      - kong.yml
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 3

configs:
  https_config:
    file: ./https-config.conf
  kong.yml:
    file: ./gateway/kong.yml

networks:
  handwriting-net: